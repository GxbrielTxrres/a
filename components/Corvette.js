/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/corvette.glb --transform --instance
Author: Harri3D (https://sketchfab.com/harrisondorn)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/corvette-stingray-edabade6d6074197ba73a52809e398a4
Title: Corvette Stingray
*/

import { useEffect, useRef, useMemo } from "react";
import { Box, Decal, RenderTexture, Text, useGLTF } from "@react-three/drei";
import { useCarStore } from "../stores/store";
import { patchShaders } from "gl-noise";
import { gsap } from "gsap";
import CSM from "three-custom-shader-material";
import { Vector2, Color } from "three";
import { useControls } from "leva";

export function Model(props) {
	const trunk = useRef();
	const hood = useRef();
	const group = useRef();
	const hoodScoop = useRef();

	const { nodes, materials } = useGLTF("/corvette-transformed.glb");

	const { openTrunk, openHood } = useControls("Car", {
		openTrunk: false,
		openHood: false,
	});

	useEffect(() => {
		if (openHood === false) {
			gsap.to(group.current.position, {
				x: 0,
				y: 0,
				z: 0,
				ease: "power3.inOut",
				duration: 3,
			});

			gsap.to(group.current.rotation, {
				x: 0,
				duration: 3,
				ease: "power3.inOut",
			});
		} else {
			gsap.to(group.current.position, {
				y: -1.25,
				z: -0.55,
				ease: "power3.inOut",

				duration: 3,
			});

			gsap.to(group.current.rotation, {
				x: -Math.PI / 4,
				duration: 3,
				ease: "power3.inOut",
			});
		}

		if (openTrunk === false) {
			gsap.to(trunk.current.rotation, {
				x: 0,
				duration: 2.15,
				ease: "power3.inOut",
			});

			// Y AND Z AXIS ARE SWAPPED
			gsap.to(trunk.current.position, {
				x: 0,
				y: 3.12,
				z: 2.25,
				duration: 2.15,
				ease: "power3.inOut",
			});
		} else {
			gsap.to(trunk.current.rotation, {
				x: Math.PI / 4,
				duration: 2.15,
				ease: "power3.inOut",
			});

			// Y AND Z AXIS ARE SWAPPED
			gsap.to(trunk.current.position, {
				y: 2.8,
				z: 2.9,
				duration: 2.15,
				ease: "power3.inOut",
			});
		}
	}, [openTrunk, openHood]);

	useEffect(() => {
		// center geometries
		trunk.current.children.forEach((child) => child.geometry.center());

		hood.current.children.forEach((child) => {
			if (child.geometry) {
				child.geometry.center();
			}
		});

		hoodScoop.current.children.forEach((child) => child.geometry.center());
	}, []);

	return (
		<group {...props} dispose={null}>
			<mesh position={[1.37, 1.385, 6.62]} scale={0.08}>
				<sphereGeometry />
				<meshStandardMaterial
					toneMapped={false}
					color={new Color(4, 4, 4)}
				/>
			</mesh>

			<mesh position={[-1.36, 1.385, 6.62]} scale={0.08}>
				<sphereGeometry />
				<meshStandardMaterial
					toneMapped={false}
					color={new Color(4, 4, 4)}
				/>
			</mesh>
			<group position={[0, 0.53, 2.93]} rotation={[-Math.PI / 2, 0, 0]}>
				<group
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<mesh
						geometry={nodes.Object_8.geometry}
						material={materials.Mirror}
					/>
					<mesh
						geometry={nodes.Object_9.geometry}
						material={materials["Glass.001"]}
					/>
				</group>
				<group
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<mesh
						geometry={nodes.Object_49.geometry}
						material={materials.Mirror}
					/>
					<mesh
						geometry={nodes.Object_50.geometry}
						material={materials.Glass_Red}
					/>
					<mesh geometry={nodes.Object_51.geometry}>
						<CarMaterial />
					</mesh>
				</group>
				<group
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<mesh
						geometry={nodes.Object_97.geometry}
						material={materials["Glass.001"]}
					/>
					<mesh
						geometry={nodes.Object_98.geometry}
						material={materials.Mirror}
					/>
				</group>
				<mesh
					geometry={nodes.Object_6.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_11.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_13.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_15.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_17.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_19.geometry}
					material={materials.TintedGlass}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_21.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_23.geometry}
					material={materials.Rubber}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>

				<group>
					{/* Hood */}
					<group ref={group}>
						<group ref={hood} position={[0, -2.7, 1.665]}>
							<mesh
								geometry={nodes.Object_100.geometry}
								position={[0, 0.1, -0.53]}
								rotation={[Math.PI / 2, 0, 0]}
							>
								<CarMaterial />
							</mesh>
							<group ref={hoodScoop} position-y={-0.63}>
								<mesh
									geometry={nodes.Object_81.geometry}
									material={materials.Border}
									position={[0, 0.1, -0.53]}
									rotation={[Math.PI / 2, 0, 0]}
								/>
								<mesh
									geometry={nodes.Object_83.geometry}
									material={materials.Border}
									position={[0, 0.1, -0.53]}
									rotation={[Math.PI / 2, 0, 0]}
								/>
								<mesh
									geometry={nodes.Object_85.geometry}
									material={materials.Border}
									position={[0, 0.1, -0.53]}
									rotation={[Math.PI / 2, 0, 0]}
								/>
							</group>
						</group>
					</group>

					{/* Trunk */}
					<group ref={trunk} position={[0, 3.12, 2.25]}>
						<mesh
							geometry={nodes.Object_29.geometry}
							position={[0, 0.1, -0.53]}
							rotation={[Math.PI / 2, 0, 0]}
						>
							<CarMaterial />
						</mesh>
						<mesh
							geometry={nodes.Object_25.geometry}
							material={materials.TintedGlass}
							position={[0, 0.1, -0.53]}
							rotation={[Math.PI / 2, 0, 0]}
						/>
						<mesh
							geometry={nodes.Object_27.geometry}
							material={materials.Border}
							position={[0, 0.1, -0.53]}
							rotation={[Math.PI / 2, 0, 0]}
						/>
					</group>
				</group>

				<mesh
					geometry={nodes.Object_31.geometry}
					material={materials.RoughMirror}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_33.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_35.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_37.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				{/* Doors */}
				<mesh
					geometry={nodes.Object_39.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>

				{/* Mirrors */}
				<mesh
					geometry={nodes.Object_104.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_106.geometry}
					material={materials.Mirror}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_41.geometry}
					material={materials.Glass_Red}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_43.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_45.geometry}
					material={materials.Mirror}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_47.geometry}
					material={materials.Light}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_53.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_55.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_57.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_59.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_61.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_63.geometry}
					material={materials.Mirror}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_65.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_67.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_69.geometry}
					material={materials.RoughGlass}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_71.geometry}
					material={materials.Mirror}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_73.geometry}
					material={materials.Light}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_75.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_77.geometry}
					material={materials.Mirror}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_79.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				{/* Door Windows */}
				<mesh
					geometry={nodes.Object_87.geometry}
					material={materials.TintedGlass}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_89.geometry}
					material={materials.Rubber}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_91.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_93.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_95.geometry}
					material={materials["Glass.001"]}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				{/* Hood */}

				<mesh
					geometry={nodes.Object_102.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				{/* Mirrors */}

				<mesh
					geometry={nodes.Object_108.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_110.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_112.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_114.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_116.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_118.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_120.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_122.geometry}
					material={materials.Plate}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_124.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_126.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_128.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_130.geometry}
					material={materials.Logo}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_132.geometry}
					material={materials.Logo}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_134.geometry}
					material={materials.Mirror}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_136.geometry}
					material={materials.Shadow}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_138.geometry}
					material={materials.Mirror}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_140.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_142.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_144.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_146.geometry}
					material={materials.Light}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_148.geometry}
					material={materials.Light}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_150.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_152.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_154.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_156.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_158.geometry}
					material={materials["Glass.001"]}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_160.geometry}
					material={materials["Glass.001"]}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_162.geometry}
					material={materials.Mirror}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_164.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_166.geometry}
					material={materials["Glass.001"]}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_168.geometry}
					material={materials.RoughGlass}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_170.geometry}
					material={materials.Mirror}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_172.geometry}
					material={materials.Mirror}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_174.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_176.geometry}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<CarMaterial />
				</mesh>
				<mesh
					geometry={nodes.Object_178.geometry}
					material={materials.Mirror}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_180.geometry}
					material={materials.Mirror}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_182.geometry}
					material={materials["Glass.001"]}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				{/* Windshield */}
				<mesh
					geometry={nodes.Object_184.geometry}
					material={materials.TintedGlass}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_186.geometry}
					material={materials.Rubber}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_188.geometry}
					material={materials.Rubber}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_190.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
				<mesh
					geometry={nodes.Object_192.geometry}
					material={materials.Border}
					position={[0, 0.1, -0.53]}
					rotation={[Math.PI / 2, 0, 0]}
				/>
			</group>
			<group
				position={[1.62, 0.74, 5.65]}
				rotation={[-Math.PI / 2, 0, 0]}
			>
				<group
					position={[-1.62, 2.83, -0.74]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<mesh
						geometry={nodes.Object_195.geometry}
						material={materials.RoughMirror}
					/>
					<mesh
						geometry={nodes.Object_196.geometry}
						material={materials.material_14}
					/>
					<mesh
						geometry={nodes.Object_197.geometry}
						material={materials.Border}
					/>
					<mesh
						geometry={nodes.Object_198.geometry}
						material={materials.Tire}
					/>
				</group>
			</group>
			<group
				position={[-1.62, 0.74, 5.65]}
				rotation={[-Math.PI / 2, 0, 0]}
			>
				<group
					position={[1.62, 2.83, -0.74]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<mesh
						geometry={nodes.Object_201.geometry}
						material={materials.RoughMirror}
					/>
					<mesh
						geometry={nodes.Object_202.geometry}
						material={materials.material_14}
					/>
					<mesh
						geometry={nodes.Object_203.geometry}
						material={materials.Border}
					/>
					<mesh
						geometry={nodes.Object_204.geometry}
						material={materials.Tire}
					/>
				</group>
			</group>
			<group position={[1.62, 0.74, 0]} rotation={[-Math.PI / 2, 0, 0]}>
				<group
					position={[-1.62, -2.83, -0.74]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<mesh
						geometry={nodes.Object_207.geometry}
						material={materials.RoughMirror}
					/>
					<mesh
						geometry={nodes.Object_208.geometry}
						material={materials.material_14}
					/>
					<mesh
						geometry={nodes.Object_209.geometry}
						material={materials.Border}
					/>
					<mesh
						geometry={nodes.Object_210.geometry}
						material={materials.Tire}
					/>
				</group>
			</group>
			<group position={[-1.62, 0.74, 0]} rotation={[-Math.PI / 2, 0, 0]}>
				<group
					position={[1.62, -2.83, -0.74]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<mesh
						geometry={nodes.Object_213.geometry}
						material={materials.RoughMirror}
					/>
					<mesh
						geometry={nodes.Object_214.geometry}
						material={materials.material_14}
					/>
					<mesh
						geometry={nodes.Object_215.geometry}
						material={materials.Border}
					/>
					<mesh
						geometry={nodes.Object_216.geometry}
						material={materials.Tire}
					/>
				</group>
			</group>
			<group
				position={[1.52, 0.74, 5.65]}
				rotation={[-Math.PI / 2, 0, 0]}
			>
				<group
					position={[-1.52, 2.83, -0.74]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<mesh
						geometry={nodes.Object_219.geometry}
						material={materials.Calipers}
					/>
					<mesh
						geometry={nodes.Object_220.geometry}
						material={materials.Border}
					/>
					<mesh
						geometry={nodes.Object_221.geometry}
						material={materials.RoughMirror}
					/>
					<mesh
						geometry={nodes.Object_222.geometry}
						material={materials.RoughMirror}
					/>
				</group>
			</group>
			<group
				position={[-1.52, 0.74, 5.65]}
				rotation={[-Math.PI / 2, 0, 0]}
			>
				<group
					position={[1.52, 2.83, -0.74]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<mesh
						geometry={nodes.Object_225.geometry}
						material={materials.Calipers}
					/>
					<mesh
						geometry={nodes.Object_226.geometry}
						material={materials.Border}
					/>
					<mesh
						geometry={nodes.Object_227.geometry}
						material={materials.RoughMirror}
					/>
					<mesh
						geometry={nodes.Object_228.geometry}
						material={materials.RoughMirror}
					/>
				</group>
			</group>
			<group position={[1.51, 0.74, 0]} rotation={[-Math.PI / 2, 0, 0]}>
				<group
					position={[-1.51, -2.83, -0.74]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<mesh
						geometry={nodes.Object_231.geometry}
						material={materials.Calipers}
					/>
					<mesh
						geometry={nodes.Object_232.geometry}
						material={materials.Border}
					/>
					<mesh
						geometry={nodes.Object_233.geometry}
						material={materials.RoughMirror}
					/>
					<mesh
						geometry={nodes.Object_234.geometry}
						material={materials.RoughMirror}
					/>
				</group>
			</group>
			<group position={[-1.51, 0.74, 0]} rotation={[-Math.PI / 2, 0, 0]}>
				<group
					position={[1.51, -2.83, -0.74]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<mesh
						geometry={nodes.Object_237.geometry}
						material={materials.Calipers}
					/>
					<mesh
						geometry={nodes.Object_238.geometry}
						material={materials.Border}
					/>
					<mesh
						geometry={nodes.Object_239.geometry}
						material={materials.RoughMirror}
					/>
					<mesh
						geometry={nodes.Object_240.geometry}
						material={materials.RoughMirror}
					/>
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("/corvette-transformed.glb");

export default function CarMaterial() {
	const ref = useRef();
	const { materials } = useGLTF("/corvette-transformed.glb");
	let { color } = useControls({
		color: {
			options: ["black", "blue", "metallic silver", "grey"],
		},
	});
	const uniforms = useRef({
		uProgress: { value: 1 },
		uResolution: {
			value: new Vector2(window.innerWidth, window.innerHeight),
		},
		uNewColor: { value: new Color(color.r, color.g, color.b) },
		uOriginalColor: { value: new Color(0, 0, 0) },
	});

	useEffect(() => {
		switch (color) {
			default:
				"black";
				color = { r: 0, g: 0, b: 0 };
				break;
			case "blue":
				color = { r: 0, g: 0, b: 1 };
				break;
			case "metallic silver":
				color = { r: 1, g: 1, b: 1 };
				break;
			case "grey":
				color = { r: 0.2, g: 0.2, b: 0.2 };
				break;
		}
		const timeout = setTimeout(() => {
			uniforms.current.uNewColor.value = color;
		}, 1000);

		return () => clearTimeout(timeout);
	}, [color]);

	useEffect(() => {
		if (uniforms.current.uProgress.value === 1) {
			gsap.to(uniforms.current.uProgress, {
				value: 0,
				duration: 3,
				ease: "power2.inOut",
			});
		} else if (uniforms.current.uProgress.value === 0) {
			gsap.to(uniforms.current.uProgress, {
				value: 1,
				duration: 1,
				repeat: 1,
				yoyo: true,
				ease: "power2.inOut",
			});
		}
	}, [color]);

	const vertexShader = useMemo(
		() => /* glsl */ `
        varying vec2 custom_vUv;
        uniform float uProgress;
        
        void main() {
          custom_vUv = uv;


  
        }
      `,
		[],
	);

	const fragmentShader = useMemo(
		() =>
			patchShaders(/* glsl */ `
          varying vec2 custom_vUv;

          uniform float uProgress;
		  uniform vec2 uResolution;
		  uniform vec3 uNewColor;
		  uniform vec3 uOriginalColor;

		  float plot(vec2 st) {    
			return smoothstep(0.01, 0.0, abs(st.y - st.x));
		}
          
          void main() {
             
            vec2 st = gl_FragCoord.xy / uResolution * uProgress - 0.5;


			vec3 color = vec3(uOriginalColor);

			float pct = plot(st);


			color = (1.0-pct)*color+pct*uNewColor;

                       
            csm_DiffuseColor = vec4(color,1.0);
          }
        `),
		[],
	);

	return (
		<>
			<CSM
				ref={ref}
				key={vertexShader + fragmentShader}
				baseMaterial={materials.material}
				vertexShader={vertexShader}
				fragmentShader={fragmentShader}
				uniforms={uniforms.current}
				toneMapped={false}
				metalness={0.9}
				roughness={0.1}
				envMapIntensity={3}
			/>
		</>
	);
}
